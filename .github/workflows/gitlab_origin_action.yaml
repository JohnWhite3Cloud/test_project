name: Import GitLab Repository

on:
  repository_dispatch:
    types: [import-gitlab-repo]

jobs:
  import-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout GitHub repository
        uses: actions/checkout@v2

      - name: Install Git
        run: sudo apt-get install git

      - name: Clone GitLab repository
        shell: pwsh
        env:
          GL_USERNAME: ${{ secrets.GL_USERNAME }}
          GL_TOKEN: ${{ secrets.GL_TOKEN }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          # TODO: How do we want to compose the github url?
          # git remote add origin https://github.com/${{ github.repository_owner }}/${{ github.event.client_payload.github_repo }}.git
        run: |
          # Infer the repo name from the GitLab URL
          $REPO_NAME=Split-Path -Path ${{ github.event.client_payload.gitlab_url }} -Leaf
          echo "Migrating: $($REPO_NAME)"
          function GitHubRepoExistence {
          param(
              [string]$repoUrl
          )
          try {
              $response = Invoke-WebRequest -Uri $repoUrl -Method Get -UseBasicParsing -ErrorAction Stop
              if ($response.StatusCode -eq 200) {
                  return $true
              } else {
                  return $false
              }
          } catch {
              return $false
          }
          }

          # Clone the GitLab repository
          echo ${{ github.event.client_payload.gitlab_url }}
          git clone https://${{ secrets.GL_USERNAME }}:${{ secrets.GL_TOKEN }}@ExpeditorsGitLabApp-devopslab.centralus.cloudapp.azure.com/${{ github.event.client_payload.gitlab_url }}.git
          cd $REPO_NAME

          # Check if the GitHub repository exists
          $GITHUB_URL="https://github.com/${GH_USERNAME}/${REPO_NAME}.git"
          $result = GitHubRepoExistence($GITHUB_URL)
          echo "Github repo already exists result: $($result)"

          # Create the GitHub repository if it doesn't exist
          if ( !$result ){
          $body = @{
              name = $REPO_NAME
          } | ConvertTo-Json
          Invoke-RestMethod -Uri "https://api.github.com/user/repos" -Method Post -Headers @{Authorization = "token ${{ secrets.GH_TOKEN }}"} -Body $body -ContentType "application/json"
          }

          # Remove the existing origin
          git remote remove origin
          # Add the new origin
          echo "Updating origin"
          git remote add origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/$GH_USERNAME/${REPO_NAME}.git
          echo "Pushing to origin"

          # Push all branches and tags to the new origin
          git push -u origin --all
          git push -u origin --tags

          # Back home
          cd ..
